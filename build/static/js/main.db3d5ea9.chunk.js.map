{"version":3,"sources":["services/contacts-mocAPI.js","redux/phoneBook/phoneBook-operations.js","components/ContactForm/ContactForm.jsx","components/ContactList/ContactList.jsx","redux/phoneBook/phoneBook-actions.js","components/Filter/Filter.jsx","components/Loader/Loader.jsx","components/App/App.jsx","redux/phoneBook/phoneBook-reducer.js","redux/store.js","index.js","components/ContactForm/ContactForm.module.css","components/Filter/Filter.module.css"],"names":["fetchAllContacts","a","axios","get","data","addContact","newContact","post","then","contactsData","deleteContact","id","delete","restContacts","defaults","baseURL","fetchContacts","createAsyncThunk","_","rejectWithValue","contactsAPI","contacts","message","addNewContact","addingContact","getState","phoneBook","name","isExist","some","contact","toLowerCase","Error","removeContact","ContactForm","useState","setName","number","setNumber","dispatch","useDispatch","handleChange","e","target","value","resetFormInputs","className","styles","form","onSubmit","preventDefault","createdAt","Date","type","pattern","title","required","onChange","placeholder","Styles","styled","div","ContactList","allContacts","filterValue","useSelector","state","filter","handleClick","includes","map","style","textTransform","onClick","filteringValue","createAction","connect","filterInputValue","filterInputOnChange","LoaderComponent","bgColor","color","size","App","pending","isLoading","error","useEffect","Loader","alert","createReducer","fulfilled","payload","rejected","combineReducers","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","store","configureStore","reducer","phoneBookReducer","devTools","process","console","log","ReactDOM","render","StrictMode","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.db3d5ea9.chunk.js","sourcesContent":["import axios from 'axios';\r\n\r\naxios.defaults.baseURL = 'https://61956d5874c1bd00176c6d57.mockapi.io/contacts'\r\n\r\nexport async function fetchAllContacts() {\r\n  const { data } = await axios.get('/contacts');\r\n  return data;\r\n}\r\n\r\nexport async function addContact(newContact) {\r\n  const contactsData = await axios.post('/contacts', newContact).then(({ data }) => data);\r\n  // console.log('addContact func :>> ', contactsData);\r\n  return contactsData;\r\n}\r\n\r\nexport async function deleteContact(id) {\r\n  const restContacts = await axios.delete(`/contacts/${id}`).then(({ data }) => data);\r\n  // console.log('deleteContact func :>> ', restContacts);\r\n  return restContacts;\r\n}","import { createAsyncThunk } from '@reduxjs/toolkit';\r\nimport * as contactsAPI from '../../services/contacts-mocAPI'\r\n\r\nexport const fetchContacts = createAsyncThunk('contacts/fetchContacts',\r\n  async (_, { rejectWithValue }) => {\r\n      try {\r\n        const contacts = await contactsAPI.fetchAllContacts();\r\n        // console.log(\"response is\", contacts);\r\n        return contacts;\r\n  } catch (error) {\r\n        return rejectWithValue(error.message);\r\n  }\r\n  }\r\n)\r\n\r\nexport const addNewContact = createAsyncThunk('contacts/addContact',\r\n  async (addingContact, {getState, rejectWithValue}) => {  \r\n    const { phoneBook: { contacts } } = getState();\r\n    const { name } = addingContact;\r\n  const isExist = contacts.some((contact) => contact.name.toLowerCase() === name.toLowerCase())\r\n    try {\r\n      if (isExist) throw new Error(`${name} is already in contacts`)\r\n      const contacts = await contactsAPI.addContact(addingContact);\r\n            //  console.log(\"response is\", contacts);\r\n        return contacts;\r\n  \r\n  } catch (error) {\r\n    return rejectWithValue(error.message);\r\n  }  \r\n})\r\n\r\nexport const removeContact = createAsyncThunk('contacts/removeContact',\r\n  async (id, { rejectWithValue }) => {\r\n    try {\r\n      const contacts = await contactsAPI.deleteContact(id);\r\n            //  console.log(\"response is\", contacts);\r\n        return contacts;\r\n  } catch (error) {\r\n    return rejectWithValue(error.message);\r\n  }  \r\n}\r\n)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// ----without createAsyncThunk----\r\n// import axios from 'axios';\r\n// import shortid from 'shortid';\r\n\r\n// import {\r\n//   fetchContactsFulfilled,\r\n//   fetchContactsPending,\r\n//   fetchContactsRejected,\r\n//   addNewContactFulfilled,\r\n//   addNewContactPending,\r\n//   addNewContactRejected,\r\n//   removeContactFulfilled,\r\n//   removeContactPending,\r\n//   removeContactRejected,\r\n//   // getFilteredContactsFulfilled,\r\n//   // getFilteredContactsPending,\r\n//   // getFilteredContactsRejected\r\n// } from './phoneBook-actions';\r\n\r\n// axios.defaults.baseURL = 'https://61956d5874c1bd00176c6d57.mockapi.io/contacts'\r\n\r\n// export const fetchContacts = (filterValue) => async dispatch => {\r\n//   dispatch(fetchContactsPending());\r\n\r\n//   try {\r\n//     const { data } = await axios.get(`/contacts?name=${filterValue}`);\r\n//     console.log(\"response is\", data);\r\n//     dispatch(fetchContactsFulfilled(data));\r\n//   } catch (error) {\r\n//     dispatch(fetchContactsRejected(error));\r\n//   }\r\n// };\r\n\r\n// export const addNewContact = (name, number) => async dispatch => {\r\n\r\n//   const newContact = {\r\n//     name,\r\n//     number,\r\n//     createdAt: new Date(),\r\n//     id: shortid.generate(),\r\n//   }\r\n\r\n//   dispatch(addNewContactPending());\r\n//   try {\r\n//     // const { data } = await axios.get('/contacts');\r\n//     // data\r\n//     //   .some((contact) => contact.name.toLowerCase() === newContact.name.toLowerCase()) ? new Error(`${newContact.name} is already in contacts`) :\r\n//     await  axios.post('/contacts', newContact).then(({data})=>dispatch(addNewContactFulfilled(data)))\r\n//   } catch (error) {\r\n//     dispatch(addNewContactRejected(error))\r\n//   }  \r\n// }\r\n\r\n// export const removeContact = id => async dispatch => {\r\n//   dispatch(removeContactPending());\r\n//   await axios\r\n//     .delete(`/contacts/${id}`)\r\n//     .then(({ data }) => dispatch(removeContactFulfilled(data)))\r\n//     .catch(error => removeContactRejected(error.message))\r\n// }\r\n\r\n// // export const getFilteredContacts = (filterValue) => async dispatch =>{\r\n// //   await axios\r\n// //     .get(`/contacts?name=cool%20${filterValue}`)\r\n// //     .then(({ data }) => {\r\n// //       dispatch(getFilteredContactsFulfilled(data));\r\n// //       console.log(\"getFilteredContacts response is\", data);\r\n// //     })\r\n// //   .catch((error)=>dispatch(getFilteredContactsRejected(error)))\r\n// // }\r\n\r\n// // export default { fetchContacts, addNewContact }\r\n","import { useState } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { addNewContact } from \"../../redux/phoneBook/phoneBook-operations\";\r\nimport styles from \"./ContactForm.module.css\";\r\n\r\nfunction ContactForm() {\r\n  const [name, setName] = useState('');\r\n  const [number, setNumber] = useState('');\r\n  const dispatch = useDispatch();\r\n  const handleChange = (e) => {\r\n    const { name, value } = e.target;\r\n    switch (name) {\r\n      case \"name\":\r\n        setName(value)\r\n        break;\r\n      case \"number\":\r\n        setNumber(value)\r\n        break;\r\n      default:\r\n        return;\r\n    }\r\n  };\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    const newContact = { name, number, createdAt: new Date(), }\r\n    dispatch(addNewContact(newContact))    \r\n    resetFormInputs();\r\n  };\r\n\r\n  const resetFormInputs = () => {\r\n    setName('');\r\n    setNumber('');\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <form className={styles.form} onSubmit={handleSubmit}>\r\n        <label>\r\n          <p>Name</p>\r\n          <input\r\n            className=\"input\"\r\n            type=\"text\"\r\n            name=\"name\"\r\n            value={name}\r\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n            title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n            required\r\n            onChange={handleChange}\r\n            placeholder=\"Enter new contact name\"\r\n          />\r\n        </label>\r\n        <label>\r\n          <p>Number</p>\r\n          <input\r\n            className=\"input\"\r\n            type=\"tel\"\r\n            name=\"number\"\r\n            value={number}\r\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n            title=\"Номер телефона должен состоять из цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n            required\r\n            onChange={handleChange}\r\n            placeholder=\"Enter new contact number\"\r\n          />\r\n        </label>\r\n        <button className=\"button\" type=\"submit\">\r\n          Add contact\r\n        </button>\r\n      </form>\r\n      \r\n    </>\r\n  );\r\n}\r\nexport default ContactForm;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// import { useState} from \"react\";\r\n// import PropTypes from \"prop-types\";\r\n// // import shortid from \"shortid\";\r\n// import { connect } from \"react-redux\";\r\n// // import phoneBookActions from '../../redux/phoneBook/phoneBook-actions'\r\n// import { addNewContact } from \"../../redux/phoneBook/phoneBook-operations\";\r\n// import { addNewContactRejected } from \"../../redux/phoneBook/phoneBook-actions\";\r\n// import styles from \"./ContactForm.module.css\";\r\n\r\n// function ContactForm ({allContacts, addContact, setError}) {\r\n//   const [name, setName] = useState('');\r\n//   const [number, setNumber] = useState('');\r\n\r\n//   const handleChange = (e) => {\r\n//     const { name, value } = e.target;\r\n//     switch (name) {\r\n//       case \"name\":\r\n//         setName(value)\r\n//         break;\r\n//     case \"number\":\r\n//         setNumber(value)\r\n//         break;\r\n//       default:\r\n//         return;\r\n//     }\r\n//   };\r\n\r\n//   const handleSubmit = (e) => {\r\n//     e.preventDefault();\r\n//     allContacts\r\n//       .some((contact) => contact.name.toLowerCase() === name.toLowerCase())\r\n//       ? setError(`${name} is already in contacts`)\r\n//       : addContact(name, number);\r\n//     setName('');\r\n//     setNumber('');\r\n//   };\r\n\r\n//     return (\r\n//       <form className={styles.form} onSubmit={handleSubmit}>\r\n//         <label>\r\n//           <p>Name</p>\r\n//           <input\r\n//             className=\"input\"\r\n//             type=\"text\"\r\n//             name=\"name\"\r\n//             value={name}\r\n//             pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n//             title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n//             required\r\n//             onChange={handleChange}\r\n//             placeholder=\"Enter new contact name\"\r\n//           />\r\n//         </label>\r\n//         <label>\r\n//           <p>Number</p>\r\n//           <input\r\n//             className=\"input\"\r\n//             type=\"tel\"\r\n//             name=\"number\"\r\n//             value={number}\r\n//             pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n//             title=\"Номер телефона должен состоять из цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n//             required\r\n//             onChange={handleChange}\r\n//             placeholder=\"Enter new contact number\"\r\n//           />\r\n//         </label>\r\n//         <button className=\"button\" type=\"submit\">\r\n//           Add contact\r\n//         </button>\r\n//       </form>\r\n//     );\r\n// }\r\n\r\n// const mapStateToProps = ({contacts:{items}}) => ({\r\n//   allContacts: items,\r\n//   // error\r\n// })\r\n\r\n// const mapDispatchToProps = dispatch => ({\r\n//   addContact: (contactName, contactNumber) =>\r\n//     dispatch(addNewContact(contactName, contactNumber)),\r\n//   setError: (error)=>dispatch(addNewContactRejected(error)),\r\n// })\r\n\r\n// export default connect(mapStateToProps, mapDispatchToProps)(ContactForm);\r\n\r\n// ContactForm.propTypes = {\r\n//   addContact: PropTypes.func.isRequired,\r\n// };\r\n\r\n","import { removeContact } from '../../redux/phoneBook/phoneBook-operations';\r\nimport { useDispatch } from 'react-redux';\r\nimport { useSelector } from 'react-redux';\r\n\r\nimport styled from 'styled-components';\r\n\r\nconst Styles = styled.div`\r\n  .selector1 {\r\n    position: relative;\r\n    width: 95%;\r\n    border-collapse: collapse;\r\n    margin: 20px auto;\r\n    overflow: scroll;\r\n  }\r\n  .selector2 {\r\n    position: sticky;\r\n    background-color: rgb(63, 207, 243);\r\n    text-transform: uppercase;\r\n    color: #fff;\r\n  }\r\n  .selector3 {\r\n    line-height: 2;\r\n    border: 1px solid burlywood;\r\n    text-align: center;\r\n  }\r\n`;\r\nfunction ContactList() {\r\n  const { contacts } = useSelector(state => state.phoneBook)\r\n  const {filter} = useSelector(state=>state.phoneBook)\r\n  \r\n  const dispatch = useDispatch();\r\n\r\n  const getFilteredContacts = (allContacts, filterValue) => {\r\n    return allContacts.filter(({ name }) =>\r\n    name.toLowerCase().includes(filterValue.toLowerCase()),\r\n  );\r\n};\r\n\r\n  const handleClick = e => dispatch(removeContact(e.target.id));\r\n  return (\r\n    <Styles>\r\n      <table className=\"selector1\">\r\n        <thead className=\"selector2\">\r\n          <tr>\r\n            <th className=\"selector3\">Name</th>\r\n            <th className=\"selector3\">Phone Number</th>\r\n            <th className=\"selector3\">Etc.</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {getFilteredContacts(contacts, filter).map(({ id, name, number }) => (\r\n              <tr key={id}>\r\n                <td\r\n                  className=\"selector3\"\r\n                  style={{ textTransform: 'capitalize' }}\r\n                >\r\n                  {name}\r\n                </td>\r\n                <td className=\"selector3\">{number}</td>\r\n                <td className=\"selector3\">\r\n                  <button\r\n                    className=\"button\"\r\n                    type=\"button\"\r\n                    onClick={handleClick}\r\n                    id={id}\r\n                  >\r\n                    Delete contact\r\n                  </button>\r\n                </td>\r\n              </tr>\r\n            ))}\r\n        </tbody>\r\n      </table>\r\n    </Styles>\r\n  );\r\n}\r\n\r\nexport default ContactList;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n//  ----without createAsyncThunk----\r\n// // import PropTypes from 'prop-types';\r\n// import { connect } from 'react-redux';\r\n// // import phoneBookActions from '../../redux/phoneBook/phoneBook-actions';\r\n// import styled from 'styled-components';\r\n// import { useEffect } from 'react';\r\n// import {fetchContacts, removeContact} from '../../redux/phoneBook/phoneBook-operations';\r\n\r\n// const Styles = styled.div`\r\n//   .selector1 {\r\n//     position: relative;\r\n//     width: 95%;\r\n//     border-collapse: collapse;\r\n//     margin: 20px auto;\r\n//     overflow: scroll;\r\n//   }\r\n//   .selector2 {\r\n//     position: sticky;\r\n//     background-color: rgb(63, 207, 243);\r\n//     text-transform: uppercase;\r\n//     color: #fff;\r\n//   }\r\n//   .selector3 {\r\n//     line-height: 2;\r\n//     border: 1px solid burlywood;\r\n//     text-align: center;\r\n//   }\r\n// `;\r\n// function ContactList(\r\n//   { cbRemoveContact,\r\n//     filterValue,\r\n//     // filteredContacts,\r\n//     allContacts,\r\n//     fetchAllContacts,\r\n//     // getFilteredContacts\r\n//   }) {\r\n//   useEffect(() => {\r\n//     fetchAllContacts(filterValue);\r\n//     // eslint-disable-next-line\r\n//   }, [filterValue]);\r\n\r\n//   // useEffect(() => {\r\n//   //   // if (!filterValue) { return }\r\n//   //   getFilteredContacts(filterValue)\r\n//   //   // eslint-disable-next-line\r\n//   // },[filterValue])\r\n\r\n//   console.log(allContacts);\r\n\r\n//   const handleClick = e => cbRemoveContact(e.target.id);\r\n//   return (\r\n//     <Styles>\r\n//       <table className=\"selector1\">\r\n//         <thead className=\"selector2\">\r\n//           <tr>\r\n//             <th className=\"selector3\">Name</th>\r\n//             <th className=\"selector3\">Phone Number</th>\r\n//             <th className=\"selector3\">Etc.</th>\r\n//           </tr>\r\n//         </thead>\r\n//         <tbody>\r\n//           {\r\n//           //allContacts &&\r\n//             allContacts.map(({ id, name, number }) => (\r\n//               <tr key={id}>\r\n//                 <td\r\n//                   className=\"selector3\"\r\n//                   style={{ textTransform: 'capitalize' }}\r\n//                 >\r\n//                   {name}\r\n//                 </td>\r\n//                 <td className=\"selector3\">{number}</td>\r\n//                 <td className=\"selector3\">\r\n//                   <button\r\n//                     className=\"button\"\r\n//                     type=\"button\"\r\n//                     onClick={handleClick}\r\n//                     id={id}\r\n//                   >\r\n//                     Delete contact\r\n//                   </button>\r\n//                 </td>\r\n//               </tr>\r\n//             ))}\r\n//         </tbody>\r\n//       </table>\r\n//     </Styles>\r\n//   );\r\n// }\r\n\r\n// // const getFilteredContacts = (allContacts, filterValue) => {\r\n// //   // const normalizeFilter = filterValue.toLowerCase();\r\n// //   return allContacts.filter(({ name }) =>\r\n// //     name.toLowerCase().includes(filterValue.toLowerCase()),\r\n// //   );\r\n// // };\r\n\r\n// const mapStateToProps = ({\r\n//   contacts: {\r\n//     items,\r\n//     filter,\r\n//   },\r\n// }) => ({\r\n//   // filteredContacts: getFilteredContacts(items, filter),\r\n//   allContacts: items,\r\n//   filterValue:filter\r\n// });\r\n\r\n// const mapDispatchToProps = dispatch => ({\r\n//   cbRemoveContact: id => dispatch(removeContact(id)),\r\n//   fetchAllContacts: (filter) => dispatch(fetchContacts(filter)),\r\n//   // getFilteredContacts: (filterValue)=>dispatch(getFilteredContacts(filterValue))\r\n// });\r\n\r\n// export default connect(mapStateToProps, mapDispatchToProps)(ContactList);\r\n\r\n// // ContactList.propTypes = {\r\n// //   contacts: PropTypes.arrayOf(\r\n// //     PropTypes.shape({\r\n// //       id: PropTypes.string.isRequired,\r\n// //       name: PropTypes.string.isRequired,\r\n// //       number: PropTypes.string.isRequired,\r\n// //     }),\r\n// //   ),\r\n// //   cbRemoveContact: PropTypes.func.isRequired,\r\n// //   fetchAllContacts:PropTypes.func.isRequired,\r\n// // };\r\n\r\n","import { createAction } from '@reduxjs/toolkit';\r\n\r\nconst filteringValue = createAction('contacts/changeFilter');\r\n\r\n// eslint-disable-next-line\r\nexport default filteringValue;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// import shortid from 'shortid';\r\n\r\n\r\n// export const fetchContactsFulfilled = createAction('contacts/fetchFulfilled');\r\n// export const fetchContactsPending = createAction('contacts/fetchPending');\r\n// export const fetchContactsRejected = createAction('contacts/fetchRejected');\r\n\r\n// export const addNewContactFulfilled = createAction('contacts/addContactFulfilled');\r\n// export const addNewContactPending = createAction('contacts/addContactPending');\r\n// export const addNewContactRejected = createAction('contacts/addContactRejected');\r\n\r\n// export const removeContactFulfilled = createAction('contacts/removeContactFulfilled');\r\n// export const removeContactPending = createAction('contacts/removeContactPending');\r\n// export const removeContactRejected = createAction('contacts/removeContactRejected');\r\n\r\n// export const getFilteredContactsFulfilled = createAction('contacts/getFilteredContactsFulfilled');\r\n// export const getFilteredContactsPending = createAction('contacts/getFilteredContactsPending');\r\n// export const getFilteredContactsRejected = createAction('contacts/getFilteredContactsRejected');\r\n\r\n\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { connect } from \"react-redux\";\r\nimport filteringValue from \"../../redux/phoneBook/phoneBook-actions\";\r\n\r\nimport styles from \"./Filter.module.css\";\r\n\r\nFilter.propTypes = {\r\n  filterInputValue: PropTypes.string,\r\n  filterInputOnChange: PropTypes.func.isRequired,\r\n};\r\n\r\nfunction Filter({ filterInputValue, filterInputOnChange }) {\r\n  return (\r\n    <label className={styles.filter}>\r\n      <p className=\"label\">Find contacts by name</p>\r\n      <input\r\n        className=\"input\"\r\n        type=\"text\"\r\n        name=\"filter\"\r\n        value={filterInputValue}\r\n        onChange={filterInputOnChange}\r\n        placeholder=\"Enter query name\"\r\n      />\r\n    </label>\r\n  );\r\n}\r\n\r\nconst mapStateToProps = ({phoneBook:{filter}}) => ({\r\n  filterInputValue: filter,\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  filterInputOnChange: (e) => dispatch(filteringValue(e.target.value))\r\n})\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter);\r\n","\r\nimport Loader from 'react-js-loader';\r\nimport styled from 'styled-components';\r\n\r\nconst Styles = styled.div`\r\n  .selector1 {\r\n    position: fixed;\r\n    top: 0;\r\n    left: 0;\r\n    width: 100vw;\r\n    height: 100vh;\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    background-color: rgba(158, 154, 154, 0.7);\r\n    z-index: 1200;\r\n  }\r\n  .selector2 {\r\n    max-width: calc(100vw - 48px);\r\n    max-height: calc(100vh - 24px);\r\n  }\r\n  .selector3 {\r\n    margin-top: 150px;\r\n    font-size: 20px;\r\n    color: darkblue;\r\n  }\r\n`;\r\n\r\nfunction LoaderComponent () {\r\n  \r\n  \r\n  return (\r\n    \r\n   <Styles>\r\n              <div className=\"selector1\">\r\n                <div className=\"selector2\">\r\n                  <Loader\r\n                    type={'bubble-loop'}\r\n                    bgColor={'#3f51b5'}\r\n                    title={'Loading...'}\r\n                    color={'#2a2a2a'}\r\n                    size={300}\r\n                  />\r\n                  <p className=\"selector3\">\r\n                    \r\n                  </p>\r\n                </div>\r\n              </div>\r\n            </Styles>\r\n      \r\n      \r\n    \r\n  );\r\n}\r\n\r\nexport default LoaderComponent;\r\n","import { useDispatch, useSelector } from \"react-redux\";\r\nimport { useEffect } from \"react\";\r\nimport { fetchContacts} from '../../redux/phoneBook/phoneBook-operations';\r\nimport ContactForm from \"../ContactForm/ContactForm\";\r\nimport ContactList from \"../ContactList/ContactList\";\r\nimport Filter from \"../Filter/Filter\";\r\nimport LoaderComponent from \"../Loader/Loader\";\r\n\r\n\r\nimport \"./App.css\";\r\n\r\nfunction App() {\r\n  const pending = useSelector(state => state.phoneBook.isLoading);\r\n  const { error } = useSelector(state => state.phoneBook);\r\n  \r\nuseEffect(() => {\r\n    dispatch(fetchContacts());\r\n    // eslint-disable-next-line\r\n}, []);\r\n  \r\n  const dispatch = useDispatch();\r\n\r\n     return (\r\n      <div className=\"App\">\r\n        <h1>PhoneBook</h1>\r\n        <ContactForm />\r\n        <h2>Contacts</h2>\r\n        <div className=\"Contacts\">\r\n          <Filter />\r\n          <ContactList/>\r\n         </div>\r\n         {pending && <LoaderComponent />}\r\n         {error && alert(error)}     \r\n         \r\n      </div>\r\n    );\r\n  }\r\nexport default App;","import { combineReducers } from 'redux';\r\nimport { createReducer } from \"@reduxjs/toolkit\";\r\nimport filteringValue from './phoneBook-actions';\r\nimport { fetchContacts, addNewContact, removeContact } from './phoneBook-operations'\r\n\r\n\r\nconst contacts = createReducer([], {\r\n  [fetchContacts.fulfilled]: (_, {payload})=>payload,\r\n  [addNewContact.fulfilled]: (state, { payload }) => [...state, payload],\r\n  [removeContact.fulfilled]: (state, {payload}) =>\r\n    state.filter(({ id }) => id !== payload.id),\r\n})\r\n\r\nconst isLoading = createReducer(false, {\r\n  [fetchContacts.pending]: () => true,\r\n  [fetchContacts.fulfilled]: () => false,\r\n  [fetchContacts.rejected]: () => false,\r\n  [addNewContact.pending]: () => true,\r\n  [addNewContact.fulfilled]: () => false,\r\n  [addNewContact.rejected]: () => false,\r\n  [removeContact.pending]: () => true,\r\n  [removeContact.fulfilled]: () => false,\r\n  [removeContact.rejected]: () => false,\r\n  [filteringValue]:()=>false,\r\n})\r\n\r\nconst filter = createReducer('',\r\n  {\r\n    [filteringValue]: (_, { payload }) => payload,\r\n  }\r\n)\r\n\r\nconst error = createReducer(null, {\r\n  [fetchContacts.rejected]: (_, { payload }) => payload,\r\n  [fetchContacts.pending]: () => null,\r\n  [fetchContacts.fulfilled]: ()=> null,\r\n  [addNewContact.rejected]: (_, { payload }) => payload,\r\n  [addNewContact.pending]: ()=> null,\r\n  [addNewContact.fulfilled]: ()=> null,\r\n  [removeContact.rejected]: (_, { payload }) => payload,\r\n  [removeContact.pending]: () => null,\r\n  [removeContact.fulfilled]: () => null,\r\n  [filteringValue]:()=>null,\r\n});\r\n\r\nexport default combineReducers({\r\n  contacts,\r\n  filter,\r\n  error,\r\n  isLoading\r\n});","import { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\r\nimport {  \r\n  FLUSH,\r\n  REHYDRATE,\r\n  PAUSE,\r\n  PERSIST,\r\n  PURGE,\r\n  REGISTER,\r\n} from 'redux-persist';\r\nimport phoneBookReducer from './phoneBook/phoneBook-reducer';\r\n\r\nconst middleware = [...getDefaultMiddleware({\r\n    serializableCheck: {\r\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\r\n    },\r\n  })]\r\n\r\nconst store = configureStore({\r\n  reducer: {phoneBook: phoneBookReducer},\r\n  middleware,\r\n  devTools: process.env.NODE_ENV === 'development'\r\n},\r\n)\r\n\r\n// eslint-disable-next-line\r\nexport default store;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { Provider } from 'react-redux';\r\n// import { PersistGate } from \"redux-persist/integration/react\";\r\nimport App from \"./components/App/App.jsx\";\r\nimport store from './redux/store';\r\n\r\nimport \"./index.css\";\r\n\r\nconsole.log('store :>> ', store.getState());\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      {/* <PersistGate loading=\"Loading state...\" persistor={store.persister}> */}\r\n      <App />\r\n      {/* </PersistGate> */}\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n\r\n// import React from 'react';\r\n// import ReactDOM from 'react-dom';\r\n// import { BrowserRouter } from 'react-router-dom';\r\n// import { Provider } from 'react-redux';\r\n// // import { PersistGate } from 'redux-persist/integration/react';\r\n// import App from './App';\r\n// import store from './redux/store';\r\n// import 'modern-normalize/modern-normalize.css';\r\n// import './styles/base.scss';\r\n\r\n// ReactDOM.render(\r\n//   <React.StrictMode>\r\n//     <Provider store={store}>\r\n//       {/* <PersistGate loading={null} persistor={store.persistor}> */}\r\n//       <BrowserRouter>\r\n//         <App />\r\n//       </BrowserRouter>\r\n//       {/* </PersistGate> */}\r\n//     </Provider>\r\n//   </React.StrictMode>,\r\n//   document.getElementById('root'),\r\n// );","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"ContactForm_form__3cYML\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"filter\":\"Filter_filter__FPxfg\"};"],"sourceRoot":""}